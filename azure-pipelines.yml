# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - Project1

stages:
- stage: build
  jobs:
  - job: build
    
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildConfiguration: Release

    steps:
    #Use .Net 1 For SonarCloud
    - task: UseDotNet@2
      displayName: 'Use .NET 2'
      inputs:
        version: 2.0.x
        performMultiLevelLookup: true

    #Prepare SonarCloud Analysis
    - task: SonarCloudPrepare@1
      displayName: 'SonarCloud Prepare'
      inputs:
        SonarCloud: 'SonarCloud'
        organization: '2011-nov02-net'
        scannerMode: 'MSBuild'
        projectKey: '2011-nov02-net_ryan-project1'
        projectName: 'ryan-project1'
        extraProperties: |
          sonar.exclusions=**/lib/**
          #sonar.cs.opencover.reportsPaths =

    #Use .Net 5
    - task: UseDotNet@2
      displayName: 'Use .NET 5'
      inputs:
        version: 5.0.x
        performMultiLevelLookup: true

    #Build
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        workingDirectory: 'Project1'

    #Run SonarCloud Analysis
    - task: SonarCloudAnalyze@1

    #Publish SonarCloud Results
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    #Run Tests
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        projects: '**/*.csproj'
        testRunTitle: 'Test Run'
        publishTestResults: true
        workingDirectory: 'Project1'

    #Publish
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-o $(build.artifactstagingdirectory)'
      
    - publish: $(build.artifactstagingdirectory)
      artifact: app

- stage: release
  jobs:
  - deployment: app_service
    environment: prod
    displayName: 'deployment'
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: app
              displayName: download app
            - task: AzureRmWebAppDeployment@4
              displayName: deploy web app
              condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Azure subscription 1 (0feb1fc7-c26d-42fa-a93a-5728459c2309)'
                appType: 'webApp'
                WebAppName: 'towner-project1'
                packageForLinux: 'app'


